const express = require('express');
const router = express.Router();
const { Video } = require('../../models/index');
const fs = require('fs');
const path = require('path');

// 1. Ëé∑ÂèñÊâÄÊúâÁöÑÂàóË°®
router.get('/videos/list', async (req, res) => {
    // Á¶ÅÁî®ÁºìÂ≠ò
    res.set({
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
    });
    
    const videos = await Video.find();
    console.log('Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑËßÜÈ¢ë:', videos.length, '‰∏™');
    console.log('ËßÜÈ¢ëÊï∞ÊçÆ:', videos);
    
    res.json({
        code: 200,
        msg: 'Ëé∑ÂèñËßÜÈ¢ëÂàóË°®ÊàêÂäü',
        data: videos
    });
});

// 2. ËßÜÈ¢ëÊí≠ÊîæË∑ØÁî± - Áõ¥Êé•Êèê‰æõÊñá‰ª∂ÊµÅ
router.get('/videos/play/:fileName', (req, res) => {
    try {
        const { fileName } = req.params;
        const videoPath = path.join(__dirname, '../../public/uploads/videos', fileName);
        
        console.log('üé¨ ËØ∑Ê±ÇÊí≠ÊîæËßÜÈ¢ë:', fileName);
        console.log('üìÅ ËßÜÈ¢ëË∑ØÂæÑ:', videoPath);
        
        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        if (!fs.existsSync(videoPath)) {
            console.log('‚ùå ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®:', videoPath);
            return res.status(404).json({
                code: 404,
                msg: 'ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®',
                data: { fileName, videoPath }
            });
        }
        
        // Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
        const stats = fs.statSync(videoPath);
        console.log('üìä ËßÜÈ¢ëÊñá‰ª∂Â§ßÂ∞è:', (stats.size / 1024 / 1024).toFixed(2), 'MB');
        
        // ËÆæÁΩÆÂìçÂ∫îÂ§¥
        res.set({
            'Content-Type': 'video/mp4',
            'Content-Length': stats.size,
            'Accept-Ranges': 'bytes',
            'Cache-Control': 'public, max-age=3600',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, HEAD',
            'Access-Control-Allow-Headers': 'Range'
        });
        
        // ÊîØÊåÅËåÉÂõ¥ËØ∑Ê±Ç
        const range = req.headers.range;
        if (range) {
            const parts = range.replace(/bytes=/, "").split("-");
            const start = parseInt(parts[0], 10);
            const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;
            const chunksize = (end - start) + 1;
            
            res.status(206);
            res.set({
                'Content-Range': `bytes ${start}-${end}/${stats.size}`,
                'Accept-Ranges': 'bytes',
                'Content-Length': chunksize
            });
            
            const stream = fs.createReadStream(videoPath, { start, end });
            stream.pipe(res);
        } else {
            const stream = fs.createReadStream(videoPath);
            stream.pipe(res);
        }
        
    } catch (error) {
        console.error('‚ùå ËßÜÈ¢ëÊí≠ÊîæÂ§±Ë¥•:', error);
        res.status(500).json({
            code: 500,
            msg: 'ËßÜÈ¢ëÊí≠ÊîæÂ§±Ë¥•',
            error: error.message
        });
    }
});

// 3. Áõ¥Êé•Êèê‰æõËßÜÈ¢ëÊñá‰ª∂ÊµÅ
router.get('/videos/stream/:fileName', (req, res) => {
    try {
        const { fileName } = req.params;
        const videoPath = path.join(__dirname, '../../public/uploads/videos', fileName);
        
        console.log('üé¨ ÊµÅÂºèÊí≠ÊîæËßÜÈ¢ë:', fileName);
        
        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        if (!fs.existsSync(videoPath)) {
            console.log('‚ùå ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®:', videoPath);
            return res.status(404).json({
                code: 404,
                msg: 'ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®'
            });
        }
        
        // Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
        const stats = fs.statSync(videoPath);
        
        // ËÆæÁΩÆÂìçÂ∫îÂ§¥
        res.set({
            'Content-Type': 'video/mp4',
            'Content-Length': stats.size,
            'Accept-Ranges': 'bytes',
            'Cache-Control': 'public, max-age=3600'
        });
        
        // ÊîØÊåÅËåÉÂõ¥ËØ∑Ê±Ç
        const range = req.headers.range;
        if (range) {
            const parts = range.replace(/bytes=/, "").split("-");
            const start = parseInt(parts[0], 10);
            const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;
            const chunksize = (end - start) + 1;
            
            res.status(206);
            res.set({
                'Content-Range': `bytes ${start}-${end}/${stats.size}`,
                'Accept-Ranges': 'bytes',
                'Content-Length': chunksize
            });
            
            const stream = fs.createReadStream(videoPath, { start, end });
            stream.pipe(res);
        } else {
            const stream = fs.createReadStream(videoPath);
            stream.pipe(res);
        }
        
    } catch (error) {
        console.error('‚ùå ËßÜÈ¢ëÊµÅÊí≠ÊîæÂ§±Ë¥•:', error);
        res.status(500).json({
            code: 500,
            msg: 'ËßÜÈ¢ëÊµÅÊí≠ÊîæÂ§±Ë¥•',
            error: error.message
        });
    }
});

// 4. Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØ
router.get('/videos/info/:fileName', (req, res) => {
    try {
        const { fileName } = req.params;
        const videoPath = path.join(__dirname, '../../public/uploads/videos', fileName);
        
        if (!fs.existsSync(videoPath)) {
            return res.status(404).json({
                code: 404,
                msg: 'ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®'
            });
        }
        
        const stats = fs.statSync(videoPath);
        const baseUrl = `${req.protocol}://${req.get('host')}`;
        
        res.json({
            code: 200,
            msg: 'Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÊàêÂäü',
            data: {
                fileName,
                fileSize: stats.size,
                fileSizeMB: (stats.size / 1024 / 1024).toFixed(2),
                createTime: stats.birthtime,
                modifyTime: stats.mtime,
                videoUrl: `${baseUrl}/api/videos/play/${fileName}`,
                staticUrl: `${baseUrl}/uploads/videos/${fileName}`
            }
        });
        
    } catch (error) {
        console.error('Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÂ§±Ë¥•:', error);
        res.status(500).json({
            code: 500,
            msg: 'Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÂ§±Ë¥•',
            error: error.message
        });
    }
});

// 5. Ê£ÄÊü•ËßÜÈ¢ëÊñá‰ª∂Áä∂ÊÄÅ
router.get('/videos/check/:fileName', (req, res) => {
    try {
        const { fileName } = req.params;
        const videoPath = path.join(__dirname, '../../public/uploads/videos', fileName);
        const staticPath = `/uploads/videos/${fileName}`;
        
        const fileExists = fs.existsSync(videoPath);
        const baseUrl = `${req.protocol}://${req.get('host')}`;
        
        if (fileExists) {
            const stats = fs.statSync(videoPath);
            res.json({
                code: 200,
                msg: 'ËßÜÈ¢ëÊñá‰ª∂Â≠òÂú®',
                data: {
                    fileName,
                    exists: true,
                    fileSize: stats.size,
                    fileSizeMB: (stats.size / 1024 / 1024).toFixed(2),
                    videoUrl: `${baseUrl}/api/videos/play/${fileName}`,
                    staticUrl: `${baseUrl}${staticPath}`,
                    createTime: stats.birthtime
                }
            });
        } else {
            res.json({
                code: 200,
                msg: 'ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®',
                data: {
                    fileName,
                    exists: false,
                    videoPath,
                    staticPath
                }
            });
        }
        
    } catch (error) {
        console.error('Ê£ÄÊü•ËßÜÈ¢ëÊñá‰ª∂Â§±Ë¥•:', error);
        res.status(500).json({
            code: 500,
            msg: 'Ê£ÄÊü•ËßÜÈ¢ëÊñá‰ª∂Â§±Ë¥•',
            error: error.message
        });
    }
});

module.exports = router; 